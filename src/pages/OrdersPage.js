import React, { useEffect, useState } from "react";
import axios from "axios";
import "./ordersPage.css";

function OrdersPage() {
  const [autoId, setAutoId] = useState("");
  const [autos, setAutos] = useState([]);
  const [orderCode, setOrderCode] = useState("");
  const [orderId, setOrderId] = useState("");
  const [copied, setCopied] = useState(false);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");

  const API = "http://5.59.233.108:8081";

  useEffect(() => {
    fetchAutos();
  }, []);

  const fetchAutos = async () => {
    try {
      const creds = localStorage.getItem("basicCreds") || "";
      const response = await axios.get(`${API}/api/auto/get/list`, {
        headers: {
          Authorization: `Basic ${creds}`,
        },
      });
      setAutos(response.data);
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π:", err);
      setError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–∞—à–∏–Ω");
    }
  };

  const handleCreateOrder = async () => {
    const token = localStorage.getItem("basicCreds");
    if (!token) return setError("–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");

    if (!autoId || isNaN(autoId)) return setError("–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å");

    try {
      setLoading(true);
      setError("");

      const res = await axios.post(
        `${API}/api/orders`,
        {
          autoIds: [parseInt(autoId)],
          description: "–ù–æ–≤—ã–π –∑–∞–∫–∞–∑",
          vin: "1HGCM82633A123456",
        },
        {
          headers: {
            Authorization: `Basic ${token}`,
            "Content-Type": "application/json",
          },
        }
      );

      const [code, id] = res.data;
      setOrderCode(code);
      setOrderId(id);

      console.log("‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:");
      console.log("üî¢ –ö–æ–¥:", code);
      console.log("üÜî ID:", id);
    } catch (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:", err.response?.data || err.message);
      setError("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞");
    } finally {
      setLoading(false);
    }
  };

  const updateOrderStatus = async (status) => {
    const token = localStorage.getItem("basicCreds");
    if (!token || !orderId) return setError("–ù–µ—Ç ID –∑–∞–∫–∞–∑–∞ –∏–ª–∏ —Ç–æ–∫–µ–Ω–∞");

    try {
      const response = await axios.put(
        `${API}/api/orders/${status}/${orderId}`,
        {},
        {
          headers: {
            Authorization: `Basic ${token}`,
            "Content-Type": "application/json",
          },
        }
      );

      console.log(`‚úÖ –°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ "${status}"`);
      console.log("üì¶ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", response.status, response.statusText);
    } catch (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞:", err.response?.data || err.message);
      setError("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞");
    }
  };

  const copyToClipboard = () => {
    navigator.clipboard.writeText(orderCode)
      .then(() => setCopied(true))
      .catch(() => setError("–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"))
      .finally(() => setTimeout(() => setCopied(false), 1500));
  };

  return (
    <div className="orders-container">
      <h2>–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑</h2>

      <div className="input-group">
        <select value={autoId} onChange={(e) => setAutoId(e.target.value)}>
          <option value="">-- –í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ --</option>
          {autos.map((auto) => (
            <option key={auto.id} value={auto.id}>
              {auto.id} - {auto.brand?.name} {auto.model?.name} {auto.year?.year} {auto.color?.name}
            </option>
          ))}
        </select>
        <button onClick={handleCreateOrder} disabled={loading}>
          {loading ? "–°–æ–∑–¥–∞–Ω–∏–µ..." : "–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑"}
        </button>
      </div>

      {error && <div className="error-box">{error}</div>}

      {orderCode && (
        <div className="order-info">
          <h3>–ö–æ–¥ –∑–∞–∫–∞–∑–∞:</h3>
          <div className="code-copy">
            <span>{orderCode}</span>
            <button onClick={copyToClipboard}>
              {copied ? "‚úì –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ" : "üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å"}
            </button>
          </div>

          <div className="info-line">
            <strong>ID –∑–∞–∫–∞–∑–∞:</strong> {orderId}
          </div>

          <h4>–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å:</h4>
          <div className="status-buttons">
            <button onClick={() => updateOrderStatus("sklad")}>–ù–∞ —Å–∫–ª–∞–¥–µ</button>
            <button onClick={() => updateOrderStatus("onway")}>–í –ø—É—Ç–∏</button>
            <button onClick={() => updateOrderStatus("comed")}>–ü—Ä–∏–±—ã–ª</button>
            <button onClick={() => updateOrderStatus("finished")}>–ó–∞–≤–µ—Ä—à—ë–Ω</button>
          </div>
        </div>
      )}
    </div>
  );
}

export default OrdersPage;
